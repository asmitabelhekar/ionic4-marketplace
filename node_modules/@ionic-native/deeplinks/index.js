var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var DeeplinksOriginal = /** @class */ (function (_super) {
    __extends(DeeplinksOriginal, _super);
    function DeeplinksOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DeeplinksOriginal.prototype.route = function (paths) { return cordova(this, "route", { "observable": true }, arguments); };
    DeeplinksOriginal.prototype.routeWithNavController = function (navController, paths, options) { return cordova(this, "routeWithNavController", { "observable": true }, arguments); };
    DeeplinksOriginal.pluginName = "Deeplinks";
    DeeplinksOriginal.plugin = "ionic-plugin-deeplinks";
    DeeplinksOriginal.pluginRef = "IonicDeeplink";
    DeeplinksOriginal.repo = "https://github.com/ionic-team/ionic-plugin-deeplinks";
    DeeplinksOriginal.install = "ionic cordova plugin add ionic-plugin-deeplinks --variable URL_SCHEME=myapp --variable DEEPLINK_SCHEME=https --variable DEEPLINK_HOST=example.com --variable ANDROID_PATH_PREFIX=/";
    DeeplinksOriginal.installVariables = ["URL_SCHEME", "DEEPLINK_SCHEME", "DEEPLINK_HOST", "ANDROID_PATH_PREFIX"];
    DeeplinksOriginal.platforms = ["Android", "Browser", "iOS"];
    return DeeplinksOriginal;
}(IonicNativePlugin));
var Deeplinks = new DeeplinksOriginal();
export { Deeplinks };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2RlZXBsaW5rcy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQTRGSCw2QkFBaUI7Ozs7SUFjOUMseUJBQUssYUFBQyxLQUFVO0lBNkJoQiwwQ0FBc0IsYUFBQyxhQUFrQixFQUFFLEtBQVUsRUFBRSxPQUF5Qjs7Ozs7Ozs7b0JBeklsRjtFQThGK0IsaUJBQWlCO1NBQW5DLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGludGVyZmFjZSBEZWVwbGlua01hdGNoIHtcbiAgLyoqXG4gICAqIFRoZSByb3V0ZSBpbmZvIGZvciB0aGUgbWF0Y2hlZCByb3V0ZVxuICAgKi9cbiAgJHJvdXRlOiBhbnk7XG5cbiAgLyoqXG4gICAqIEFueSBhcmd1bWVudHMgcGFzc2VkIGVpdGhlciB0aHJvdWdoIHJvdXRlIHBhcmFtZXRlcnMgb3IgR0VUIHBhcmFtZXRlcnNcbiAgICovXG4gICRhcmdzOiBhbnk7XG5cbiAgLyoqXG4gICAqIFRoZSBkZWVwbGluayBvYmplY3QgcHJvY2Vzc2VkIGZyb20gdGhlIHBsdWdpbiwgYWxvbmcgd2l0aCBhbnlcbiAgICogYW55IGludGVybmFsIG5hdGl2ZSBkYXRhIGF2YWlsYWJsZSBhcyBcImV4dHJhc1wiIGF0IHRoZSB0aW1lXG4gICAqIHRoZSByb3V0ZSB3YXMgbWF0Y2hlZCAoZm9yIGV4YW1wbGUsIEZhY2Vib29rIHNvbWV0aW1lcyBhZGRzIGV4dHJhIGRhdGEpXG4gICAqL1xuICAkbGluazogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERlZXBsaW5rT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBTZXQgdGhlIG1hdGNoZWQgcm91dGUgYXMgcm9vdCBwYWdlIHVzaW5nIGBuYXZDdHJsLnNldFJvb3QoKWAgbWV0aG9kLlxuICAgKi9cbiAgcm9vdDogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBAbmFtZSBEZWVwbGlua3NcbiAqIEBkZXNjcmlwdGlvbiBUaGlzIHBsdWdpbiBoYW5kbGVzIGRlZXBsaW5rcyBvbiBpT1MgYW5kIEFuZHJvaWQgZm9yIGJvdGggY3VzdG9tIFVSTCBzY2hlbWUgbGlua3NcbiAqIGFuZCBVbml2ZXJzYWwgQXBwIExpbmtzLlxuICpcbiAqIFBsZWFzZSByZWFkIHRoZSBbaW9uaWMgcGx1Z2luIGRlZXBsaW5rcyBkb2NzXShodHRwczovL2dpdGh1Yi5jb20vaW9uaWMtdGVhbS9pb25pYy1wbHVnaW4tZGVlcGxpbmtzKSBmb3IgaU9TIGFuZCBBbmRyb2lkIGludGVncmF0aW9uLlxuICogWW91IG11c3QgYWRkIGB1bml2ZXJzYWwtbGlua3NgIHRvIHlvdXIgYGNvbmZpZy54bWxgIGFuZCBzZXQgdXAgQXBwbGUgQXBwIFNpdGUgQXNzb2NpYXRpb24gKEFBU0EpIGZvciBpT1MgYW5kIEFzc2V0IExpbmtzIGZvciBBbmRyb2lkLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgRGVlcGxpbmtzIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9kZWVwbGlua3Mvbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGRlZXBsaW5rczogRGVlcGxpbmtzKSB7IH1cbiAqXG4gKiB0aGlzLmRlZXBsaW5rcy5yb3V0ZSh7XG4gKiAgICAgICcvYWJvdXQtdXMnOiBBYm91dFBhZ2UsXG4gKiAgICAgICcvdW5pdmVyc2FsLWxpbmtzLXRlc3QnOiBBYm91dFBhZ2UsXG4gKiAgICAgICcvcHJvZHVjdHMvOnByb2R1Y3RJZCc6IFByb2R1Y3RQYWdlXG4gKiAgICB9KS5zdWJzY3JpYmUobWF0Y2ggPT4ge1xuICogICAgICAvLyBtYXRjaC4kcm91dGUgLSB0aGUgcm91dGUgd2UgbWF0Y2hlZCwgd2hpY2ggaXMgdGhlIG1hdGNoZWQgZW50cnkgZnJvbSB0aGUgYXJndW1lbnRzIHRvIHJvdXRlKClcbiAqICAgICAgLy8gbWF0Y2guJGFyZ3MgLSB0aGUgYXJncyBwYXNzZWQgaW4gdGhlIGxpbmtcbiAqICAgICAgLy8gbWF0Y2guJGxpbmsgLSB0aGUgZnVsbCBsaW5rIGRhdGFcbiAqICAgICAgY29uc29sZS5sb2coJ1N1Y2Nlc3NmdWxseSBtYXRjaGVkIHJvdXRlJywgbWF0Y2gpO1xuICogICAgfSwgbm9tYXRjaCA9PiB7XG4gKiAgICAgIC8vIG5vbWF0Y2guJGxpbmsgLSB0aGUgZnVsbCBsaW5rIGRhdGFcbiAqICAgICAgY29uc29sZS5lcnJvcignR290IGEgZGVlcGxpbmsgdGhhdCBkaWRuXFwndCBtYXRjaCcsIG5vbWF0Y2gpO1xuICogICAgfSk7XG4gKiBgYGBcbiAqXG4gKiBBbHRlcm5hdGl2ZWx5LCBpZiB5b3UncmUgdXNpbmcgSW9uaWMsIHRoZXJlJ3MgYSBjb252ZW5pZW5jZSBtZXRob2QgdGhhdCB0YWtlcyBhIHJlZmVyZW5jZSB0byBhIGBOYXZDb250cm9sbGVyYCBhbmQgaGFuZGxlc1xuICogdGhlIGFjdHVhbCBuYXZpZ2F0aW9uIGZvciB5b3U6XG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogdGhpcy5kZWVwbGlua3Mucm91dGVXaXRoTmF2Q29udHJvbGxlcih0aGlzLm5hdkNvbnRyb2xsZXIsIHtcbiAqICAgJy9hYm91dC11cyc6IEFib3V0UGFnZSxcbiAqICAgJy9wcm9kdWN0cy86cHJvZHVjdElkJzogUHJvZHVjdFBhZ2VcbiAqIH0pLnN1YnNjcmliZShtYXRjaCA9PiB7XG4gKiAgICAgLy8gbWF0Y2guJHJvdXRlIC0gdGhlIHJvdXRlIHdlIG1hdGNoZWQsIHdoaWNoIGlzIHRoZSBtYXRjaGVkIGVudHJ5IGZyb20gdGhlIGFyZ3VtZW50cyB0byByb3V0ZSgpXG4gKiAgICAgLy8gbWF0Y2guJGFyZ3MgLSB0aGUgYXJncyBwYXNzZWQgaW4gdGhlIGxpbmtcbiAqICAgICAvLyBtYXRjaC4kbGluayAtIHRoZSBmdWxsIGxpbmsgZGF0YVxuICogICAgIGNvbnNvbGUubG9nKCdTdWNjZXNzZnVsbHkgbWF0Y2hlZCByb3V0ZScsIG1hdGNoKTtcbiAqICAgfSwgbm9tYXRjaCA9PiB7XG4gKiAgICAgLy8gbm9tYXRjaC4kbGluayAtIHRoZSBmdWxsIGxpbmsgZGF0YVxuICogICAgIGNvbnNvbGUuZXJyb3IoJ0dvdCBhIGRlZXBsaW5rIHRoYXQgZGlkblxcJ3QgbWF0Y2gnLCBub21hdGNoKTtcbiAqICAgfSk7XG4gKiBgYGBcbiAqXG4gKiBTZWUgdGhlIFtJb25pYyBEZWVwbGlua3MgRGVtb10oaHR0cHM6Ly9naXRodWIuY29tL2lvbmljLXRlYW0vaW9uaWMyLWRlZXBsaW5rcy1kZW1vL2Jsb2IvbWFzdGVyL2FwcC9hcHAudHMpIGZvciBhbiBleGFtcGxlIG9mIGhvdyB0b1xuICogcmV0cmlldmUgdGhlIGBOYXZDb250cm9sbGVyYCByZWZlcmVuY2UgYXQgcnVudGltZS5cbiAqXG4gKiBAaW50ZXJmYWNlc1xuICogRGVlcGxpbmtNYXRjaFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0RlZXBsaW5rcycsXG4gIHBsdWdpbjogJ2lvbmljLXBsdWdpbi1kZWVwbGlua3MnLFxuICBwbHVnaW5SZWY6ICdJb25pY0RlZXBsaW5rJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9pb25pYy10ZWFtL2lvbmljLXBsdWdpbi1kZWVwbGlua3MnLFxuICBpbnN0YWxsOlxuICAgICdpb25pYyBjb3Jkb3ZhIHBsdWdpbiBhZGQgaW9uaWMtcGx1Z2luLWRlZXBsaW5rcyAtLXZhcmlhYmxlIFVSTF9TQ0hFTUU9bXlhcHAgLS12YXJpYWJsZSBERUVQTElOS19TQ0hFTUU9aHR0cHMgLS12YXJpYWJsZSBERUVQTElOS19IT1NUPWV4YW1wbGUuY29tIC0tdmFyaWFibGUgQU5EUk9JRF9QQVRIX1BSRUZJWD0vJyxcbiAgaW5zdGFsbFZhcmlhYmxlczogWydVUkxfU0NIRU1FJywgJ0RFRVBMSU5LX1NDSEVNRScsICdERUVQTElOS19IT1NUJywgJ0FORFJPSURfUEFUSF9QUkVGSVgnXSxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnQnJvd3NlcicsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRGVlcGxpbmtzIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogRGVmaW5lIGEgc2V0IG9mIHBhdGhzIHRvIG1hdGNoIGFnYWluc3QgaW5jb21pbmcgZGVlcGxpbmtzLlxuICAgKlxuICAgKiBAcGFyYW0ge3BhdGhzfSBwYXRocyBEZWZpbmUgYSBzZXQgb2YgcGF0aHMgdG8gbWF0Y2ggYWdhaW5zdCBpbmNvbWluZyBkZWVwbGlua3MuXG4gICAqIHBhdGhzIHRha2VzIGFuIG9iamVjdCBvZiB0aGUgZm9ybSB7ICdwYXRoJzogZGF0YSB9LiBJZiBhIGRlZXBsaW5rXG4gICAqIG1hdGNoZXMgdGhlIHBhdGgsIHRoZSByZXN1bHRpbmcgcGF0aC1kYXRhIHBhaXIgd2lsbCBiZSByZXR1cm5lZCBpbiB0aGVcbiAgICogcHJvbWlzZSByZXN1bHQgd2hpY2ggeW91IGNhbiB0aGVuIHVzZSB0byBuYXZpZ2F0ZSBpbiB0aGUgYXBwIGFzIHlvdSBzZWUgZml0LlxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxEZWVwbGlua01hdGNoPn0gUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgaXMgY2FsbGVkIGVhY2ggdGltZSBhIGRlZXBsaW5rIGNvbWVzIHRocm91Z2gsIGFuZFxuICAgKiBlcnJvcnMgaWYgYSBkZWVwbGluayBjb21lcyB0aHJvdWdoIHRoYXQgZG9lcyBub3QgbWF0Y2ggYSBnaXZlbiBwYXRoLlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIG9ic2VydmFibGU6IHRydWUsXG4gIH0pXG4gIHJvdXRlKHBhdGhzOiBhbnkpOiBPYnNlcnZhYmxlPERlZXBsaW5rTWF0Y2g+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogVGhpcyBpcyBhIGNvbnZlbmllbmNlIHZlcnNpb24gb2YgYHJvdXRlYCB0aGF0IHRha2VzIGEgcmVmZXJlbmNlIHRvIGEgTmF2Q29udHJvbGxlclxuICAgKiBmcm9tIElvbmljLCBvciBhIGN1c3RvbSBjbGFzcyB0aGF0IGNvbmZvcm1zIHRvIHRoaXMgcHJvdG9jb2w6XG4gICAqXG4gICAqIE5hdkNvbnRyb2xsZXIucHVzaCA9IGZ1bmN0aW9uKFZpZXcsIFBhcmFtcyl7fVxuICAgKlxuICAgKiBUaGlzIGhhbmRsZXIgd2lsbCBhdXRvbWF0aWNhbGx5IG5hdmlnYXRlIHdoZW4gYSByb3V0ZSBtYXRjaGVzLiBJZiB5b3UgbmVlZCBmaW5lci1ncmFpbmVkXG4gICAqIGNvbnRyb2wgb3ZlciB0aGUgYmVoYXZpb3Igb2YgYSBtYXRjaGluZyBkZWVwbGluaywgdXNlIHRoZSBwbGFpbiBgcm91dGVgIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtOYXZ9IG5hdkNvbnRyb2xsZXIgRGVmaW5lIGEgc2V0IG9mIHBhdGhzIHRvIG1hdGNoIGFnYWluc3QgaW5jb21pbmcgZGVlcGxpbmtzLlxuICAgKiBwYXRocyB0YWtlcyBhbiBvYmplY3Qgb2YgdGhlIGZvcm0geyAncGF0aCc6IGRhdGEgfS4gSWYgYSBkZWVwbGlua1xuICAgKiBtYXRjaGVzIHRoZSBwYXRoLCB0aGUgcmVzdWx0aW5nIHBhdGgtZGF0YSBwYWlyIHdpbGwgYmUgcmV0dXJuZWQgaW4gdGhlXG4gICAqIHByb21pc2UgcmVzdWx0IHdoaWNoIHlvdSBjYW4gdGhlbiB1c2UgdG8gbmF2aWdhdGUgaW4gdGhlIGFwcCBhcyB5b3Ugc2VlIGZpdC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhdGhzXG4gICAqXG4gICAqIEBwYXJhbSB7RGVlcGxpbmtPcHRpb25zfSBvcHRpb25zXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPERlZXBsaW5rTWF0Y2g+fSBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCByZXNvbHZlcyBlYWNoIHRpbWUgYSBkZWVwbGluayBjb21lcyB0aHJvdWdoLCBhbmRcbiAgICogZXJyb3JzIGlmIGEgZGVlcGxpbmsgY29tZXMgdGhyb3VnaCB0aGF0IGRvZXMgbm90IG1hdGNoIGEgZ2l2ZW4gcGF0aC5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxuICB9KVxuICByb3V0ZVdpdGhOYXZDb250cm9sbGVyKG5hdkNvbnRyb2xsZXI6IGFueSwgcGF0aHM6IGFueSwgb3B0aW9ucz86IERlZXBsaW5rT3B0aW9ucyk6IE9ic2VydmFibGU8RGVlcGxpbmtNYXRjaD4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19